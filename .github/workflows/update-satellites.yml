name: Update Satellite Data

on:
    schedule:
      - cron: "0 6 * * *"  # Runs every day at 6 AM UTC
    workflow_dispatch:  # Allows manual trigger
    workflow_run:
      workflows: ["Deploy Satellite Backend and Updater to AWS ECS"]  # Make sure the name matches deploy.yml
      types:
        - completed
jobs:
  update_satellites:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Run Satellite Updater Task
        run: |
          aws ecs run-task \
            --cluster satellite-cluster \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=['subnet-03ca2c44173fbf8d3','subnet-0593ff12f1ad4cd92','subnet-0e32111ad7d8d84ef'],securityGroups=['sg-0755968a8d3c86a81'],assignPublicIp='ENABLED'}" \
            --task-definition satellite-updater-task

      - name: Fetch Satellite Updater Logs
        run: |
          LOG_STREAM_PREFIX="ecs/satellite-updater/"
          LOG_GROUP="/aws/ecs/satellite-cluster"

          # Wait for logs to be available (max 90 seconds)
          for i in {1..18}; do
            LOG_STREAM=$(aws logs describe-log-streams \
              --log-group-name "$LOG_GROUP" \
              --query "logStreams[?starts_with(logStreamName, '$LOG_STREAM_PREFIX')].logStreamName | [-1]" \
              --region us-east-2 --output text)

            if [[ -n "$LOG_STREAM" && "$LOG_STREAM" != "None" ]]; then
              echo "üìú Found log stream: $LOG_STREAM"
              break
            fi

            echo "‚è≥ Waiting for log stream to be available..."
            sleep 5
          done

          if [[ -z "$LOG_STREAM" || "$LOG_STREAM" == "None" ]]; then
            echo "‚ùå No log stream found for satellite-updater!"
            exit 1
          fi

          # Wait until log stream has events
          for i in {1..18}; do
            LOG_COUNT=$(aws logs get-log-events \
              --log-group-name "$LOG_GROUP" \
              --log-stream-name "$LOG_STREAM" \
              --limit 1 \
              --region us-east-2 --query "events[*].message" --output text)

            if [[ -n "$LOG_COUNT" && "$LOG_COUNT" != "None" ]]; then
              echo "‚úÖ Logs found! Fetching logs now."
              break
            fi

            echo "‚è≥ Waiting for logs to be available in the stream..."
            sleep 5
          done

          if [[ -z "$LOG_COUNT" || "$LOG_COUNT" == "None" ]]; then
            echo "‚ùå No logs found in stream $LOG_STREAM!"
            exit 1
          fi

          # Retrieve last 50 log entries
          echo "üìú Fetching logs from: $LOG_STREAM"
          aws logs get-log-events \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$LOG_STREAM" \
            --limit 50 \
            --region us-east-2 --query "events[*].message"
