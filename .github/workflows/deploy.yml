name: Deploy Satellite Backend to AWS ECS

on:
  push:
    branches:
      - main  # Trigger deployment only on pushes to main
  workflow_dispatch:  # Allows manual triggers from the Actions tab

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment for dependency check (optional)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies (optional for verification)
      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r backend/requirements.txt

      # Step 4: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Step 5: Authenticate Docker with AWS ECR ok
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

      # Step 6: Build and Push Docker Image to ECR
      - name: Build and push Docker image
        run: |
          docker build -t satellite-backend ./backend
          docker tag satellite-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/satellite-backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/satellite-backend:latest

      # Step 7: Deploy Updated Image to ECS
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster satellite-cluster --service satellite-backend-service --force-new-deployment
